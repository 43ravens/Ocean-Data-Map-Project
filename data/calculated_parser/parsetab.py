
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftPOWERrightUMINUSCOMMA CONST DIVIDE ID LPAREN MINUS NUMBER PLUS POWER RPAREN TILDE TIMESstatement : expressionexpression : IDexpression : TILDE IDexpression : MINUS expression %prec UMINUSexpression : expression PLUS expression\n                    | expression MINUS expression\n                    | expression TIMES expression\n                    | expression DIVIDE expression\n                    | expression POWER NUMBERexpression : LPAREN expression RPARENexpression : NUMBERexpression : CONSTexpression : ID LPAREN arguments RPARENarguments : argumentarguments : arguments COMMA argumentargument : expression'
    
_lr_action_items = {'ID':([0,4,5,7,9,10,11,12,14,28,],[3,15,3,3,3,3,3,3,3,3,]),'TILDE':([0,5,7,9,10,11,12,14,28,],[4,4,4,4,4,4,4,4,4,]),'MINUS':([0,2,3,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,25,26,27,28,],[5,10,-2,5,-11,5,-12,5,5,5,5,5,-3,-4,10,-5,-6,-7,-8,-9,10,-10,-13,5,]),'LPAREN':([0,3,5,7,9,10,11,12,14,28,],[7,14,7,7,7,7,7,7,7,7,]),'NUMBER':([0,5,7,9,10,11,12,13,14,28,],[6,6,6,6,6,6,6,22,6,6,]),'CONST':([0,5,7,9,10,11,12,14,28,],[8,8,8,8,8,8,8,8,8,]),'$end':([1,2,3,6,8,15,16,18,19,20,21,22,26,27,],[0,-1,-2,-11,-12,-3,-4,-5,-6,-7,-8,-9,-10,-13,]),'PLUS':([2,3,6,8,15,16,17,18,19,20,21,22,25,26,27,],[9,-2,-11,-12,-3,-4,9,-5,-6,-7,-8,-9,9,-10,-13,]),'TIMES':([2,3,6,8,15,16,17,18,19,20,21,22,25,26,27,],[11,-2,-11,-12,-3,-4,11,11,11,-7,-8,-9,11,-10,-13,]),'DIVIDE':([2,3,6,8,15,16,17,18,19,20,21,22,25,26,27,],[12,-2,-11,-12,-3,-4,12,12,12,-7,-8,-9,12,-10,-13,]),'POWER':([2,3,6,8,15,16,17,18,19,20,21,22,25,26,27,],[13,-2,-11,-12,-3,-4,13,13,13,13,13,-9,13,-10,-13,]),'RPAREN':([3,6,8,15,16,17,18,19,20,21,22,23,24,25,26,27,29,],[-2,-11,-12,-3,-4,26,-5,-6,-7,-8,-9,27,-14,-16,-10,-13,-15,]),'COMMA':([3,6,8,15,16,18,19,20,21,22,23,24,25,26,27,29,],[-2,-11,-12,-3,-4,-5,-6,-7,-8,-9,28,-14,-16,-10,-13,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,5,7,9,10,11,12,14,28,],[2,16,17,18,19,20,21,25,25,]),'arguments':([14,],[23,]),'argument':([14,28,],[24,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',114),
  ('expression -> ID','expression',1,'p_expression_variable','parser.py',118),
  ('expression -> TILDE ID','expression',2,'p_expression_variable_all','parser.py',127),
  ('expression -> MINUS expression','expression',2,'p_expression_uop','parser.py',137),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',141),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',142),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',143),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',144),
  ('expression -> expression POWER NUMBER','expression',3,'p_expression_binop','parser.py',145),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',158),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',162),
  ('expression -> CONST','expression',1,'p_expression_const','parser.py',166),
  ('expression -> ID LPAREN arguments RPAREN','expression',4,'p_expression_function','parser.py',170),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',179),
  ('arguments -> arguments COMMA argument','arguments',3,'p_arguments_1','parser.py',183),
  ('argument -> expression','argument',1,'p_argument','parser.py',188),
]
